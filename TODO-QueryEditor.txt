
1.	Implement facility to use top and bottom of a tab as initialize/finalizer of
	any query you execute from this tab.
	Example of use:
	Edit manually to declare and assing value to variables used in the 
	executed sql fragment.
	Implementation:
	Define open/clossing mark that delimites initialize and finalizer zone.
	Can be found inside comments to prevent errors when execuing the full script.
	For example:
		declare i int
		set i = 3
		-- ###:EndInit:###
	
		... rest of the script
	
		-- ###:BeginFinalize:###
		drop table #temptable
	
2.	Plugin associated to each provider that implements one or more supported
	techniques to handle large resultsets.
	1-	Paging and sorting
		On SqlServer and Sybase, enclose a inner select statement into an outer 
		select statement to get the inner statement paged and sorted through
		datagrid.
	2-  Asynchronousy retrieve and show results on the datagrid. Allow cancellation.
		Does not allow sort.
		Cannot be implemented using adonet sybase provider.

3.	Modes of execution
	Asisted:
		Only works for 'select' statements, update delete and more complex sql scripts
		are not supported and will surelly fail.
		The 'select' statement is executed as the FROM 'table' of an outer select
		statement generated internally by the application.
		This outer statement is responsible of the pagin and sorting functionality.
		Is executed with Ctrl+R
		This mode of execution is not compatible with - 1.-
	Custom:
		The sql statement typed by the user is passed to the provider and executed 
		as-is.
		In this mode is useful - 1.- and -2.2- (if correctly implemented by the 
		provider) but -2.1- is not applicable.
		Is executed with Ctrl+E
		
4.	Editable grid
	In either execution mode (Asisted or Custom) the resulting data grid will be
	editable if the provider can retrieve information about the base tables involved
	in the select statement.
	
	A parallel dataset is mantained to keep track of the editions. When a row is 
	modified, inserted or deleted dataset is modified acordingly to allow
	'update' the database.
	
	If there are multiple base tables the user can select to wich one wants to 
	execute the update.
	If a primary key is not known for a base table, it can be defined using the
	checkboxes on the headers.
	
	A menú options are provided to switch result grid to 'update mode' and 'delete mode'
	'update mode'
		All loaded rows are cleared but not recorded as deletes.
		New rows can be pasted or inserted and filled manually but are allways send
		to the provider as updates. If update fails, row are inserted.
	'delete mode'
		Is similar to 'update mode' but all visible rows are deleted from the base
		table when updated to the provider.
	
	Special support is implemented for columns of type 'object' (for sql_variant
	columns, for example) when edited, the modified text is coherted to the existing 
	real type. Is cohertion fails value is not modified.
	A combo box is provided for the user to choose a datatype (this is only allowed 
	for object datatype columns).
	
	Columns can be copied and pasted. When copied, QueryTool2-native, raw text, 
	excel compatible, and html versions are inserted to the clipboard.